import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button, Form, Card } from "react-bootstrap";
import axios from "axios";
import user from "../image/user.png";
import mail from "../image/mail.png";
import pass from "../image/pass.png";
import map from "../image/map.png";
import agee from "../image/agee.png";
import carer from "../image/carer.png";
import bg from "../image/bg.jpg";

function Signup() {
  const navigate = useNavigate();
  const [username, setName] = useState("");
  const [lastname, setLast] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [career, setCareer] = useState("");
  const [gender, setGender] = useState("");
  const [province, setProvince] = useState("");
  const [age, setAge] = useState("");

  const provinces = [
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
    "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
    "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå",
    "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£",
    "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤",
    "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó",
    "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥",
    "‡∏ä‡∏∏‡∏°‡∏û‡∏£",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢",
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
    "‡∏ï‡∏£‡∏±‡∏á",
    "‡∏ï‡∏£‡∏≤‡∏î",
    "‡∏ï‡∏≤‡∏Å",
    "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å",
    "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°",
    "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°",
    "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
    "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä",
    "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå",
    "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™",
    "‡∏ô‡πà‡∏≤‡∏ô",
    "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨",
    "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå",
    "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå",
    "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ",
    "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤",
    "‡∏û‡∏±‡∏á‡∏á‡∏≤",
    "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á",
    "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£",
    "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å",
    "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ",
    "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå",
    "‡πÅ‡∏û‡∏£‡πà",
    "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤",
    "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
    "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°",
    "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£",
    "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô",
    "‡∏¢‡∏∞‡∏•‡∏≤",
    "‡∏¢‡πÇ‡∏™‡∏ò‡∏£",
    "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î",
    "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
    "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
    "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
    "‡∏•‡∏≥‡∏û‡∏π‡∏ô",
    "‡πÄ‡∏•‡∏¢",
    "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©",
    "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£",
    "‡∏™‡∏á‡∏Ç‡∏•‡∏≤",
    "‡∏™‡∏ï‡∏π‡∏•",
    "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£",
    "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°",
    "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£",
    "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß",
    "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢",
    "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ",
    "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå",
    "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢",
    "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π",
    "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á",
    "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå",
    "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
    "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç",
  ];

  const careers = [
    "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
    "‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ",
    "‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å",
    "‡∏Ñ‡∏£‡∏π/‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå",
    "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î",
    "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
    "‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£",
    "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ",
  ];

  const handleSignup = async (e) => {
    e.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if (password !== confirmPassword) {
      setError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á
    if (
      !username ||
      !lastname ||
      !email ||
      !password ||
      !career ||
      !gender ||
      !province ||
      !age
    ) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
      return;
    }

    setError(""); // ‡∏•‡πâ‡∏≤‡∏á error ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á

    try {
      const newUser = {
        username,
        lastname,
        email,
        password,
        career,
        gender,
        province,
        age,
      };
      const response = await axios.post(
        "http://localhost:5000/signup",
        newUser
      );

      if (response.data.success) {
        alert("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        navigate("/login");
      } else {
        setError(response.data.message || "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (err) {
      console.error("Signup error:", err);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  };

  return (
    <div
      className="d-flex justify-content-center align-items-center min-vh-100"
      style={{ backgroundColor: "#f5f6fa" }}
    >
      <div
        className="d-none d-md-flex flex-column justify-content-end align-items-start text-white p-5"
        style={{
          width: "50%",
          height: "100vh",
          backgroundImage: `url(${bg})`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          color: "white",

          paddingBottom: "60px",
        }}
      >
        <h1
          className="fw-bold mb-3"
          style={{ fontSize: "1.7rem", color: "black", marginTop: 0 }}
        >
          ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô <br /> 
        </h1>
        <p
          className="mt-2"
          style={{ fontSize: "1rem", color: "black", opacity: 0.9 }}
        >
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
          üåç
        </p>
      </div>

      <div
        className="d-flex flex-column justify-content-center align-items-center p-4"
        style={{ width: "55%", height: "100vh", backgroundColor: "#fbfaff" }}
      >
        <Card
          className="shadow-sm border-0"
          style={{
            width: "600px",
            borderRadius: "16px",
            padding: "25px 30px",
            maxHeight: "100vh",
            backgroundColor: "white",
          }}
        >
          <h2
            className="text-center fw-bold mb-3"
            style={{ color: "#f3a734ff", marginTop: "-20px" }}
          >
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
          </h2>

          <Form onSubmit={handleSignup}>
            <div className="d-flex gap-2 mb-3">
              <Form.Control
                type="text"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                value={username}
                onChange={(e) => setName(e.target.value)}
                style={{
                  backgroundImage: `url(${user})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
              <Form.Control
                type="text"
                placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                value={lastname}
                onChange={(e) => setLast(e.target.value)}
                style={{
                  backgroundImage: `url(${user})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
            </div>

            <Form.Group className="mb-3">
              <Form.Control
                type="email"
                placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                style={{
                  backgroundImage: `url(${mail})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
            </Form.Group>

            {/* Password */}
            <Form.Group className="mb-3">
              <Form.Control
                type="password"
                placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                isInvalid={confirmPassword && password !== confirmPassword}
                style={{
                  backgroundImage: `url(${pass})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Control
                type="password"
                placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                isInvalid={confirmPassword && password !== confirmPassword}
                style={{
                  backgroundImage: `url(${pass})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
              <Form.Control.Feedback type="invalid">
                ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
              </Form.Control.Feedback>
            </Form.Group>

            {/* Career */}
            <Form.Group className="mb-3">
              <Form.Select
                value={career}
                onChange={(e) => setCareer(e.target.value)}
                style={{
                  backgroundImage: `url(${carer})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              >
                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û --</option>
                {careers.map((job, index) => (
                  <option key={index} value={job}>
                    {job}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            {/* Gender */}
            <Form.Group className="mb-3 d-flex align-items-center">
              <Form.Label className="fw-semibold me-3 mb-0">‡πÄ‡∏û‡∏® :</Form.Label>
              <div>
                <Form.Check
                  inline
                  label="‡∏ä‡∏≤‡∏¢"
                  name="gender"
                  type="radio"
                  value="Male"
                  onChange={(e) => setGender(e.target.value)}
                />
                <Form.Check
                  inline
                  label="‡∏´‡∏ç‡∏¥‡∏á"
                  name="gender"
                  type="radio"
                  value="Female"
                  onChange={(e) => setGender(e.target.value)}
                />
                <Form.Check
                  inline
                  label="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏®"
                  name="gender"
                  type="radio"
                  value="Notgender"
                  onChange={(e) => setGender(e.target.value)}
                />
              </div>
            </Form.Group>

            {/* Province */}
            <Form.Group className="mb-3">
              <Form.Select
                value={province}
                onChange={(e) => setProvince(e.target.value)}
                style={{
                  backgroundImage: `url(${map})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              >
                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î --</option>
                {provinces.map((prov, index) => (
                  <option key={index} value={prov}>
                    {prov}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            {/* Age */}
            <Form.Group className="mb-4">
              <Form.Control
                type="number"
                placeholder="‡∏≠‡∏≤‡∏¢‡∏∏"
                value={age}
                onChange={(e) => setAge(e.target.value)}
                min="1"
                style={{
                  backgroundImage: `url(${agee})`,
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "8px center",
                  paddingLeft: "35px",
                  backgroundSize: "20px 20px",
                }}
              />
            </Form.Group>

            {/* Error Message */}
            {error && <div className="text-danger mb-3">{error}</div>}

            <Button
              type="submit"
              className="w-100 fw-bold"
              style={{
                backgroundColor: "#f3a734ff",
                border: "none",
                borderRadius: "8px",
              }}
            >
              ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            </Button>

            <p className="text-center mt-3 mb-0">
              ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?{" "}
              <Button
                variant="link"
                onClick={() => navigate("/login")}
                style={{ color: "#f3a734ff", textDecoration: "none" }}
              >
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
              </Button>
              <Button
                variant="link"
                onClick={() => navigate("/home")}
                style={{ color: "#E6531A", textDecoration: "none" }}
              >
                ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
              </Button>
            </p>
          </Form>
        </Card>
      </div>
    </div>
  );
}

export default Signup;
